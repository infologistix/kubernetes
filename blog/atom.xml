<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://infologistix.github.io/kubernetes/blog</id>
    <title>Cloud Engineering Blog</title>
    <updated>2022-10-20T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://infologistix.github.io/kubernetes/blog"/>
    <subtitle>Cloud Engineering Blog</subtitle>
    <icon>https://infologistix.github.io/kubernetes/https://infologistix.de/wp-content/uploads/cropped-infologistix-Leistungsangebot-Data-Delivery-32x32.png</icon>
    <entry>
        <title type="html"><![CDATA[Testdaten Sampling]]></title>
        <id>https://infologistix.github.io/kubernetes/blog/testdata</id>
        <link href="https://infologistix.github.io/kubernetes/blog/testdata"/>
        <updated>2022-10-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Bevor neue Applikationen in Produktion gehen, sind datengetriebene Tests unabdingbar, um die Qualität von Software und Anwendungen sicherzustellen. Für diese Tesings haben wir einen Testdatengenerator gebaut.]]></summary>
        <content type="html"><![CDATA[<p>Bevor neue Applikationen in Produktion gehen, sind datengetriebene Tests unabdingbar, um die Qualität von Software und Anwendungen sicherzustellen. Für diese Tesings haben wir einen Testdatengenerator gebaut.</p><p>Personenbezogene Daten in vielen Branchen ein Kernelement der gesamten Geschäftstätigkeit, z.B. bei Versicherungen, Banken und natürlich im Handel. Die hier abgelegten sensible und hoch-differenzierten Informationen können aus datenschutzrechtlichen Gründen nicht für das Testing genutzt werden. Statt dessen werden oft synthetische Daten genutzt, deren Struktur meist nicht den Originaldatenbestande wiedergeben.</p><p>Hierdurch können keine realistischen Testbedingungen geschaffen werden. Die Folge sind deutlich höhere Aufwendungen, weil Fixinings im laufenden Betrieb installiert werden müssen. Im schlimmsten Fall können sogar Akzeptanzprobleme bei Nutzern und Kunden entstehen.</p><p>Notwendig sind stattdessen Testdaten, die realistisch und repräsentativ für die den Gesamtdatenbestand sind. Die Erstellung solcher Testdaten bedeutet allerdings in vielen Fällen einen hohen Arbeitsaufwand, da Abhängigkeiten erhalten bleiben müssen, die Datentypen sich nicht ändern dürfen, Outlier Beachtung brauchen, personenbezogene Daten nicht ohne Pseudonomisierung verwendet werden sollten usw.</p><p>Deshalb haben wir einen Testdatengenerator entwickelt, der aus einem großen Originaldatenset ein repräsentatives Sample erstellt und dieses anschließend pseudonomisiert.</p><p>Dabei kann aus zwei unterschiedlichen Samplingmethoden ausgewählt werden, welche wir vorab mithilfe statistischer Verfahrensweisen evaluiert haben. Außerdem stehen verschiedene Pseudonomisierungen zur Verfügung. Zum Schluss wird ein Download der Testdaten und ein kurzer Bericht, mit einer Gegenüberstellung der Original- und Testdaten, zur Verfügung gestellt.</p><p>Aktuell haben wir das gesamte System mittels Azure Functions als on-demand Website bereitgestellt. Das heißt, bei einer hohen Nachfrage werden mehr Ressourcen so lange wie notwendig bereitgehalten. Bei einem Rückgang der Nachfragen, werden die Ressourcen wieder reduziert. Deshalb kann das Laden der Seite manchmal ein paar Sekunden dauern.</p><p>Aktuell befinden wir uns noch in der Testphase des <a href="https://kitestdataengine.azurewebsites.net/file_upload" target="_blank" rel="noopener noreferrer">Testdatengenerators</a>.</p>]]></content>
        <author>
            <name>Marie Padberg</name>
            <uri>https://github.com/MariePad</uri>
        </author>
        <category label="Python3" term="Python3"/>
        <category label="Azure" term="Azure"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker in WSL]]></title>
        <id>https://infologistix.github.io/kubernetes/blog/docker-in-wsl</id>
        <link href="https://infologistix.github.io/kubernetes/blog/docker-in-wsl"/>
        <updated>2022-01-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Docker Desktop wird kostenplichtig. Wir zeigen Ihnen eine kostenfreie Alternative.]]></summary>
        <content type="html"><![CDATA[<p>Docker Desktop wird kostenplichtig. Wir zeigen Ihnen eine kostenfreie Alternative.</p><p>Docker wird von Millionen von Entwicklern verwendet, um Anwendungen zu erstellen, zu veröffentlichen und auszuführen - überall. Darüber hinaus nutzen 55 % der Entwickler Docker jeden Tag bei der Arbeit. </p><p>Kürzlich hat Docker beschlossen, im Rahmen einer Umgestaltung des Geschäftsmodells Gebühren für Unternehmenskunden zu erheben, um ein nachhaltiges Geschäftsmodell zu etablieren. Ab dem 31.01.2022 wird Docker Desktop für Enterprise-Nutzer mit mehr als 250 Mitarbeitern und einem Jahresumsatz von mehr als 10 Millionen Dollar nicht mehr frei verfügbar sein. </p><p>Obwohl Docker Desktop viel mehr als nur Compose und GUI enthält, stellt sich die Frage, ob GUI und zusätzliche Funktionen ausreichen, um Unternehmen davon zu überzeugen, Geld für Lizenzen auszugeben, anstatt eine Kombination aus verfügbarer und einfach zu bedienender Open-Source-Software zu verwenden? </p><p>Die Docker-Plattform besteht aus mehreren Open-Source-Komponenten, von denen Docker Desktop nur ein Teil dessen ist. Der Docker-Client ist ein Befehlszeilendienstprogramm, das die API des Docker-Daemons, der wichtigste Teil des Docker-Software-Stacks, bedient. Beide Tools sind quelloffen und frei verfügbar. Docker Desktop ist für die Ausführung unter Windows und MacOS konzipiert und verwaltet und installiert diese Open-Source-Tools für Unternehmensbetriebssysteme. Durch die Verwaltung der Open-Source-Docker-Tools in einer Open-Source-Umgebung entfällt die Notwendigkeit von Docker Desktop und dem damit verbundenen Lizenzierungsmodell. </p><p>Wir haben die Verwaltung dieser Tools so einfach gemacht wie die Nutzung des Internets. Von großen Rechenzentren abgeschaut, in denen Linux-basierte Server Docker ohne Lizenzkosten ausführen, nutzen wir ebendiese Tools auf einer lokalen Entwicklungsmaschine. Wenn wir dies auf ein Unternehmensbetriebssystem wie Windows übertragen, benötigen wir das neue Entwicklungswerkzeug Windows Subsystem für Linux als Voraussetzung.  </p><p>Wir haben die Installation von Docker so einfach gestaltet, dass nach der Aktivierung und Installation von Windows Subsystem für Linux nur noch ein Installationsprogramm ausgeführt werden muss. Als Bonus können Sie den Docker-Client selbst auf Ihrem lokalen Rechner installieren, indem Sie ihn herunterladen und einen Docker-Kontext konfigurieren, um die intern gehostete Docker-Plattform auf Windows Subsystem für Linux zu benutzen. </p><p>Zusammenfassend haben wir haben einen Installer für die Ausführung von Docker in einer Windows Subsystem für Linux-Umgebung kombiniert und erstellt. Der daraus resultierende Installer, zusätzliche Konfiguration und Dokumentation finden Sie in unserem GitHub Repository.</p>]]></content>
        <author>
            <name>Suphanat Avipan</name>
            <uri>https://github.com/suphanataviphan</uri>
        </author>
        <author>
            <name>Harald P. Gerhards</name>
            <uri>https://github.com/HPG84</uri>
        </author>
        <author>
            <name>Nico Graap</name>
            <uri>https://github.com/Nico-infologistix</uri>
        </author>
        <author>
            <name>Paul Schmidt</name>
            <uri>https://github.com/pickmylight</uri>
        </author>
        <category label="Docker" term="Docker"/>
        <category label="WSL" term="WSL"/>
    </entry>
</feed>