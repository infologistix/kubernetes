<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://infologistix.github.io/kubernetes/blog</id>
    <title>KubeSpectra Blog</title>
    <updated>2022-10-20T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://infologistix.github.io/kubernetes/blog"/>
    <subtitle>KubeSpectra Blog</subtitle>
    <icon>https://infologistix.github.io/kubernetes/https://infologistix.de/wp-content/uploads/cropped-infologistix-Leistungsangebot-Data-Delivery-32x32.png</icon>
    <entry>
        <title type="html"><![CDATA[Testdaten Sampling]]></title>
        <id>https://infologistix.github.io/kubernetes/blog/testdata</id>
        <link href="https://infologistix.github.io/kubernetes/blog/testdata"/>
        <updated>2022-10-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Bevor neue Applikationen in Produktion gehen, sind datengetriebene Tests unabdingbar, um die Qualität von Software und Anwendungen sicherzustellen. Für diese Tesings haben wir einen Testdatengenerator gebaut.]]></summary>
        <content type="html"><![CDATA[<p>Bevor neue Applikationen in Produktion gehen, sind datengetriebene Tests unabdingbar, um die Qualität von Software und Anwendungen sicherzustellen. Für diese Tesings haben wir einen Testdatengenerator gebaut.</p><p>Personenbezogene Daten in vielen Branchen ein Kernelement der gesamten Geschäftstätigkeit, z.B. bei Versicherungen, Banken und natürlich im Handel. Die hier abgelegten sensible und hoch-differenzierten Informationen können aus datenschutzrechtlichen Gründen nicht für das Testing genutzt werden. Statt dessen werden oft synthetische Daten genutzt, deren Struktur meist nicht den Originaldatenbestande wiedergeben.</p><p>Hierdurch können keine realistischen Testbedingungen geschaffen werden. Die Folge sind deutlich höhere Aufwendungen, weil Fixinings im laufenden Betrieb installiert werden müssen. Im schlimmsten Fall können sogar Akzeptanzprobleme bei Nutzern und Kunden entstehen.</p><p><strong>Notwendig sind stattdessen Testdaten, die realistisch und repräsentativ für die den Gesamtdatenbestand sind.</strong> Die Erstellung solcher Testdaten bedeutet allerdings in vielen Fällen einen hohen Arbeitsaufwand, da Abhängigkeiten erhalten bleiben müssen, die Datentypen sich nicht ändern dürfen, Outlier Beachtung brauchen, personenbezogene Daten nicht ohne Pseudonomisierung verwendet werden sollten usw.</p><p><strong>Deshalb haben wir einen Testdatengenerator entwickelt, der aus einem großen Originaldatenset ein repräsentatives Sample erstellt und dieses anschließend pseudonomisiert.</strong></p><p>Dabei kann aus zwei unterschiedlichen Samplingmethoden ausgewählt werden, welche wir vorab mithilfe statistischer Verfahrensweisen evaluiert haben. Außerdem stehen verschiedene Pseudonomisierungen zur Verfügung. Zum Schluss wird ein Download der Testdaten und ein kurzer Bericht, mit einer Gegenüberstellung der Original- und Testdaten, zur Verfügung gestellt.</p><p>Aktuell haben wir das gesamte System mittels Azure Functions als on-demand Website bereitgestellt. Das heißt, bei einer hohen Nachfrage werden mehr Ressourcen so lange wie notwendig bereitgehalten. Bei einem Rückgang der Nachfragen, werden die Ressourcen wieder reduziert. Deshalb kann das Laden der Seite manchmal ein paar Sekunden dauern.</p><p>Aktuell befinden wir uns noch in der Testphase des <a href="https://kitestdataengine.azurewebsites.net/file_upload" target="_blank" rel="noopener noreferrer">Testdatengenerators</a>.</p>]]></content>
        <author>
            <name>Marie Padberg</name>
            <uri>https://github.com/MariePad</uri>
        </author>
        <category label="Python3" term="Python3"/>
        <category label="Azure" term="Azure"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker in WSL]]></title>
        <id>https://infologistix.github.io/kubernetes/blog/docker-in-wsl</id>
        <link href="https://infologistix.github.io/kubernetes/blog/docker-in-wsl"/>
        <updated>2022-01-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Docker Desktop wird kostenplichtig. Wir zeigen Ihnen eine kostenfreie Alternative - Docker im Windows Subsystem for Linux (WSL)]]></summary>
        <content type="html"><![CDATA[<p>Docker Desktop wird kostenplichtig. Wir zeigen Ihnen eine kostenfreie Alternative - Docker im Windows Subsystem for Linux (WSL)</p><p>Die kostenfreien Produkte von Docker werden von Millionen Entwicklern verwendet, um Anwendungen zu erstellen, zu veröffentlichen und auszuführen – in Rechenzentren, der public cloud oder mit Docker Desktop auf dem lokalen PC. 55% der Entwickler nutzen Docker jeden Tag bei der Arbeit.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="docker-desktop-wird-kostenpflichtig">Docker Desktop wird kostenpflichtig<a href="#docker-desktop-wird-kostenpflichtig" class="hash-link" aria-label="Direct link to Docker Desktop wird kostenpflichtig" title="Direct link to Docker Desktop wird kostenpflichtig">​</a></h4><p>Doch die Firma Docker muss auch wirtschaftlich arbeiten und hat beschlossen, im Rahmen einer Umgestaltung des Geschäftsmodells Gebühren für Unternehmenskunden zu erheben. Ab dem 31.01.2022 wird jegliche Nutzung von Docker Desktop für Nutzer in Unternehmen mit mehr als 250 Beschäftigten oder einem Jahresumsatz von mehr als 10 Millionen Dollar kostenpflichtig sein. Ein Abonnement kostet dann je nach weiten genutzten Diensten und Zahlungsweise zwischen 7$ und 21$ pro Nutzer und Monat. Für Unternehmen und Behörden stellt sich daher die Frage, ob Docker Desktop die monatliche Gebühr wert ist oder ob es andere Optionen gibt.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="docker-deamon-und-docker-client-weiterhin-free-and-open-source-foss">Docker Deamon und Docker Client weiterhin free and open source (FOSS)<a href="#docker-deamon-und-docker-client-weiterhin-free-and-open-source-foss" class="hash-link" aria-label="Direct link to Docker Deamon und Docker Client weiterhin free and open source (FOSS)" title="Direct link to Docker Deamon und Docker Client weiterhin free and open source (FOSS)">​</a></h4><p>Der Docker Software Stack besteht neben der zukünftig kostenpflichtigen GUI aus kostenfreien, quelloffenen Komponenten, die die eigentliche Arbeit machen. Der Docker-Client ist ein Befehlszeilendienstprogramm, das die API des Docker Daemon bedient. Der Docker Deamon bildet das Herzstück der Container Laufzeitumgebung. Unter Linux können diese nativ und kostenfrei installiert und genutzt werden.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="neue-wege-unter-windows-mit-infologistix">Neue Wege unter Windows mit infologistix<a href="#neue-wege-unter-windows-mit-infologistix" class="hash-link" aria-label="Direct link to Neue Wege unter Windows mit infologistix" title="Direct link to Neue Wege unter Windows mit infologistix">​</a></h4><p>Unter Microsoft Windows 10 und Windows 11 muss man hingegen einen etwas aufwändigeren Weg beschreiten, um dem Lizensierungsmodell zu entgehen und Docker weiterhin kostenfrei auf dem lokalen PC zu nutzen. Aber wir von infologistix haben die Verwaltung dieser Tools so einfach gemacht wie die Nutzung des Internets. Von großen Rechenzentren abgeschaut, in denen Linux Server Docker als FOSS ausführen, nutzen wir ebendiese Tools für die lokalen Entwicklungsumgebung.</p><p><strong>Wir haben die Installation von Docker so einfach gestaltet, dass nach der Aktivierung und Installation des Windows Subsystem für Linux nur noch ein Installationsprogramm ausgeführt werden muss. Als Bonus können Sie den Docker-Client selbst auf Ihrem lokalen Rechner installieren, indem Sie ihn herunterladen und einen Docker-Kontext konfigurieren, um die intern gehostete Docker-Plattform auf Windows Subsystem für Linux zu benutzen.</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="los-gehts">Los geht’s<a href="#los-gehts" class="hash-link" aria-label="Direct link to Los geht’s" title="Direct link to Los geht’s">​</a></h3><h5 class="anchor anchorWithStickyNavbar_LWe7" id="installation-von-wsl2">Installation von WSL2<a href="#installation-von-wsl2" class="hash-link" aria-label="Direct link to Installation von WSL2" title="Direct link to Installation von WSL2">​</a></h5><p>Der erste Schritt um auch unter Windows 10 oder Windows 11 Docker native auf einem Linux Kernel laufen zu lassen ist die Aktivierung des neuen Windows Subsystem for Linux (WSL2):</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="aktuelle-builds">Aktuelle Builds<a href="#aktuelle-builds" class="hash-link" aria-label="Direct link to Aktuelle Builds" title="Direct link to Aktuelle Builds">​</a></h5><p>Wenn Sie Windows 10, Version 2004 und höher (Build 19041 und höher), oder Windows 11 ausführen können Sie einfach Ihre Power Shell als Administrator öffnen und folgenden Befehl ausführen:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ wsl --install</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Dieser Befehl aktiviert die erforderlichen optionalen Windows Komponenten, lädt den aktuellen Linux-Kernel herunter, legt WSL 2 als Standard fest und installiert eine Linux-Distribution für Sie (standardmäßig Ubuntu). Um die installierte Distribution zu ändern, geben Sie Folgendes ein:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ wsl --install -d &lt;Distribution Name&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Ersetzen Sie &lt; Distribution Name &gt;  durch den Namen der Distribution, die Sie installieren möchten.</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="ältere-builds">Ältere Builds<a href="#ältere-builds" class="hash-link" aria-label="Direct link to Ältere Builds" title="Direct link to Ältere Builds">​</a></h5><p>Windows 10 biete ab dem Fall Creators Update (Version 1709) das Windows Subsystem for Linux (WSL) in der Version 1 an. WSL2 ist nach erweiterter Abwärtskompatibilität ab Build 18363.1049 verfügbar. Für die folgenden Schritte beziehen wir uns immer auf die 64-Bit Variante der PowerShell.</p><p>Als erstes muss WSL als Windows Feature aktiviert werden. Rufen Sie dazu die PowerShell als Administrator auf und aktivieren sie das Feature:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Vor der Installation von WSL 2 müssen Sie das optionale Feature Plattform des virtuellen Computers aktivieren.</p><p>Öffnen Sie die PowerShell als Administrator und führen Sie Folgendes aus:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Starten Sie anschließend den Rechner neu.</p><p>Installieren Sie nun das WSL-Update-Paket. Hierzu laden Sie das aktuelle Update-Paket unter <a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener noreferrer">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a> herunter. Führen Sie das im vorherigen Schritt heruntergeladene Updatepaket aus.</p><p>Starten Sie nun eine PowerShell (ohne Administratorrechte) und führen Sie Folgendes aus um WSL2 als Standardversion zu setzen</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ wsl --set-default-version 2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Öffnen Sie den Microsoft Store, und wählen Sie Ihre bevorzugte Linux-Distribution aus. Unser Skript und das hier beschriebene Vorgehen unterstützt:</p><ul><li>Debian</li><li>Ubuntu</li><li>OpenSUSE</li></ul><p>Wenn Sie eine neu installierte Linux-Distribution zum ersten Mal starten, wird ein Konsolenfenster geöffnet, und Sie werden aufgefordert, zu warten, bis die Dateien dekomprimiert und auf dem Computer gespeichert wurden. Alle zukünftigen Starts sollten weniger als eine Sekunde in Anspruch nehmen.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="infologistix-docker-installer-für-wsl2">Infologistix Docker Installer für WSL2<a href="#infologistix-docker-installer-für-wsl2" class="hash-link" aria-label="Direct link to Infologistix Docker Installer für WSL2" title="Direct link to Infologistix Docker Installer für WSL2">​</a></h3><p><img loading="lazy" alt="Aufbau der infologistix Docker Lösung" src="/kubernetes/assets/images/docker-wsl-aufbau-4aa218026063c6a3248c2ac665625aa4.png" width="607" height="409" class="img_ev3q">
Abbildung: Aufbau der infologistix Docker Lösung</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="installation">Installation<a href="#installation" class="hash-link" aria-label="Direct link to Installation" title="Direct link to Installation">​</a></h5><p>Docker kann mit folgendem Bash-Befehl innerhalb der WSL2 installiert werden:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ bash &lt;(curl -fsSL https://raw.githubusercontent.com/infologistix/docker-wsl2/main/install.sh)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="nutzung-von-docker-unter-windows">Nutzung von Docker unter Windows<a href="#nutzung-von-docker-unter-windows" class="hash-link" aria-label="Direct link to Nutzung von Docker unter Windows" title="Direct link to Nutzung von Docker unter Windows">​</a></h5><p>Unter Windows ist die Pfadvariable hinzuzufügen. Der Installer installier einen Docker Client nach <strong>C:\Docker\docker.exe</strong>. Dieser Pfad muss einmalig angegeben werden, dann ist Docker auch in Windows vorhanden.</p><p>Die Benutzung erfolgt dann mit einem docker context:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ docker context create wsldocker --docker host=tcp://localhost:2375</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ docker context use wsldocker</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="deinstallation">Deinstallation<a href="#deinstallation" class="hash-link" aria-label="Direct link to Deinstallation" title="Direct link to Deinstallation">​</a></h5><p>Docker kann mit folgendem Bash-Befehl innerhalb der WSL2 deinstalliert werden:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ bash &lt;(curl -fsSL https://raw.githubusercontent.com/infologistix/docker-wsl2/main/uninstall.sh)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="fazit">Fazit<a href="#fazit" class="hash-link" aria-label="Direct link to Fazit" title="Direct link to Fazit">​</a></h3><p>Zusammenfassend haben wir haben einen Installer für die Ausführung von Docker in einer Windows Subsystem für Linux-Umgebung kombiniert und erstellt. Der daraus resultierende Installer, zusätzliche Konfiguration und Dokumentation finden Sie in unserem GitHub Repository:</p><p><a href="https://github.com/infologistix/docker-wsl2" target="_blank" rel="noopener noreferrer">infologistix/docker-wsl2: Simple and fast Docker Integration in WSL2 without using Docker Desktop. Suitable for large enterprises</a></p>]]></content>
        <author>
            <name>Suphanat Avipan</name>
            <uri>https://github.com/suphanataviphan</uri>
        </author>
        <author>
            <name>Harald P. Gerhards</name>
            <uri>https://github.com/HPG84</uri>
        </author>
        <author>
            <name>Nico Graap</name>
            <uri>https://github.com/Nico-infologistix</uri>
        </author>
        <author>
            <name>Paul Schmidt</name>
            <uri>https://github.com/pickmylight</uri>
        </author>
        <category label="Docker" term="Docker"/>
        <category label="WSL" term="WSL"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Use Case für einen WebCrawler]]></title>
        <id>https://infologistix.github.io/kubernetes/blog/webcrawler</id>
        <link href="https://infologistix.github.io/kubernetes/blog/webcrawler"/>
        <updated>2021-07-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[WebCrawler sind eine einfache, effektive und kostengünstige Möglichkeit Websiten gezielt nach Informationen zu durchsuchen und Ihnen komprimiert zur Verfügung zu stellen. Die Programme sind damit ideal dafür geeignet repetitive Aufgaben zu erledigen.]]></summary>
        <content type="html"><![CDATA[<p>WebCrawler sind eine einfache, effektive und kostengünstige Möglichkeit Websiten gezielt nach Informationen zu durchsuchen und Ihnen komprimiert zur Verfügung zu stellen. Die Programme sind damit ideal dafür geeignet repetitive Aufgaben zu erledigen.</p><p>In diesem Artikel stellen wir Ihnen einen Use Case für einen WebCrawler vor und geben Ihnen ein ausführliches How-To zur Einrichtung eines cloudbasierten Dockers.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="webcrawler---use-case">WebCrawler - Use Case<a href="#webcrawler---use-case" class="hash-link" aria-label="Direct link to WebCrawler - Use Case" title="Direct link to WebCrawler - Use Case">​</a></h3><p>WebCrawler sind leichtgewichtige und kosteneffiziente Datensammler, die Ihnen einen Informationsvorsprung sichern.
Heutzutage sind (fast) alle Informationen online verfügbar. Googeln ist ein Synonym für das Finden von Informationen geworden, vom einfachen Kochrezept bis hin zur wissenschaftlichen Abhandlung.</p><p>Die meisten dieser Daten sind frei zugänglich und können einfach abgerufen werden. Die schiere Menge an Daten und Websites macht eine Suche aber sehr zeit- und personalintensiv. Der Zeitaufwand spielt insbesondere dann eine Rolle, wenn die Suche nicht nur einmalig geschehen soll, sondern regelmäßig, um dann die Änderungen und Entwicklungen zu monitoren. Hier bieten sich sogenannte WebCrawler als eine einfache und vor allem kosteneffiziente Möglichkeit an, die Suche zu automatisieren.</p><p>WebCrawler sind Programme, die automatisiert das Internet durchsuchen und Websites analysieren. Sie sind damit perfekt geeignet, um repetitive Aufgaben zu erledigen.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="anwendungsbeispiel">Anwendungsbeispiel<a href="#anwendungsbeispiel" class="hash-link" aria-label="Direct link to Anwendungsbeispiel" title="Direct link to Anwendungsbeispiel">​</a></h4><p>Bei der infologistix GmbH verwenden wir WebCrawler für verschiedene Aufgaben, u.a. um öffentliche Ausschreibungsseiten zu monitoren und die für uns interessanten Ausschreibungen heraus zu filtern. Dazu crawlen wir ca. zwei Dutzend verschiedene Websites von Behörden, Unternehmen und Portalen. Crawlen bedeutet hier, dass ein cloud-basierter <u>Docker</u> die Seiten nacheinander aufruft, sie nach interessanten Ausschreibungen durchsucht und uns eine Ergebnisliste mit ausschließlich relevanten Ausschreibungen zur Verfügung stellt. Technische Details, sowie das Dockerimage und eine Anleitung zum Nachbauen finden Sie im folgenden <a href="#webcrawler---how-to">How-To Abschnitt</a>.</p><p>Die Ergebnisliste mit relevanten Ausschreibungen stellt für uns eine enorme Zeit- und Kostenersparnis dar. Anstatt hunderte von Ausschreibungen pro Tag durchsuchen zu müssen, müssen jetzt nur noch ein halbes Dutzend Ausschreibung geprüft werden. Und das bei nur ca. 1€ Betriebskosten pro Woche für den WebCrawler.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="resümee">Resümee<a href="#resümee" class="hash-link" aria-label="Direct link to Resümee" title="Direct link to Resümee">​</a></h4><p>WebCrawler sind eine einfache, effektive und kostengünstige Möglichkeit, Websites gezielt nach Informationen zu durchsuchen und Ergebnisse komprimiert zur Verfügung zu stellen. Unser Dockerimage stellt da eine besonders leichtgewichtige und easy to-use Variante dar. Sollten Sie Fragen zu WebCrawlern haben oder eine maßgeschneiderte Lösung suchen, kontaktieren Sie uns gerne.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="webcrawler---how-to">WebCrawler - How-To<a href="#webcrawler---how-to" class="hash-link" aria-label="Direct link to WebCrawler - How-To" title="Direct link to WebCrawler - How-To">​</a></h3><p>Mit diesem How-To zeigen wir, wie man einen Cloud-basierten Docker einrichtet, um damit Websites nach Informationen zu durchsuchen und aufbereitete Suchergebnisse mittels Benachrichtigung über Social Chat wie MS Teams oder Slack oder auch E-Mail zur Verfügung zu stellen.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="was-man-dafür-benötigt">Was man dafür benötigt<a href="#was-man-dafür-benötigt" class="hash-link" aria-label="Direct link to Was man dafür benötigt" title="Direct link to Was man dafür benötigt">​</a></h4><ul><li>Lokale Docker Runtime</li><li>Social Chat (MS Teams, Slack) oder E-Mail Client</li><li><a href="https://hub.docker.com/r/infologistix/docker-selenium-python" target="_blank" rel="noopener noreferrer">infologistix WebCrawler von Docker Hub</a></li><li>Etwas Erfahrung mit <a href="https://www.python.org/" target="_blank" rel="noopener noreferrer">Python</a>, Command Line, HTML</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="für-die-anwendung-in-der-cloud-wahlweise">Für die Anwendung in der Cloud wahlweise:<a href="#für-die-anwendung-in-der-cloud-wahlweise" class="hash-link" aria-label="Direct link to Für die Anwendung in der Cloud wahlweise:" title="Direct link to Für die Anwendung in der Cloud wahlweise:">​</a></h4><ul><li><a href="https://azure.microsoft.com/en-us/" target="_blank" rel="noopener noreferrer">Microsoft Azure</a></li><li><a href="https://aws.amazon.com/" target="_blank" rel="noopener noreferrer">Amazon AWS</a></li><li><a href="https://cloud.google.com/" target="_blank" rel="noopener noreferrer">Google Cloud Platform</a></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="legen-wir-los">Legen wir los<a href="#legen-wir-los" class="hash-link" aria-label="Direct link to Legen wir los" title="Direct link to Legen wir los">​</a></h4><u> 0. GitHub Repository Klonen </u><p>Dieses How-To basiert auf einer Projektstruktur, welche wir bereits angelegt haben und, die Sie direkt in Ihr Projekt übernehmen können.
Unter dem folgenden Link finden Sie dieses How-To auch <strong>als fertiges Programm im Ordner Examples.</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ git clone https://github.com/infologistix/docker-selenium-python.git ./infologistix</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Wir wollen hier ein einfaches Beispiel betrachten und zunächst herausfinden, welche Services unser Unternehmen bietet. Die hier gezeigten Funktionen lassen sich einfach auf neue Gegebenheiten anpassen</p><u> 1. Grundstruktur und Bibliotheken </u><p>Das Test-Framework Selenium bietet uns bereits eine große Auswahl an Funktionen und Equipment, um Websites gezielt zu bearbeiten und Informationen zu ermitteln. Die Grundstruktur unseres Projektes basiert auf einer Klasse, welche die Kommunikation mit dem Browser übernimmt und uns sämtliche Daten aus der Webseite extrahiert. Darüber hinaus verwenden wir pandas als Tool für die Formatierung und Datenanalyse der Suchergebnisse.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">from selenium.webdriver import Chrome</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">from selenium.webdriver import ChromeOptions </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">from selenium.webdriver.support.ui import WebDriverWait</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">from selenium.webdriver.common.by import By</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">from selenium.webdriver.support import expected_conditions as EC</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">import pandas as pd</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Ausgehend von den genutzten Bibliotheken können wir eine Basisklasse für unseren Crawler schreiben. Diese Basisklasse beschreibt den allgemeinen Crawler. Wir verwenden die Klassendarstellung, da hier die Website und deren Funktionen und Elementextraktion als Variablen und Funktionen aufgerufen werden können. Initial öffnen wir hiermit ein Chrome-Fenster im „headless“-Modus und öffnen die gegebene Webseite.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">class InfologistixCrawler():</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    def __init__(self, url: str, headless: bool=True) -&gt; None:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        options = ChromeOptions()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        options.add_argument("–no-sandbox")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        options.add_argument("–window-size=1280,720")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        if headless:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            options.add_argument("–headless")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        self.driver = Chrome(options=options)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        self.driver.get(url)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    def run(self):</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        page = self.driver.page_source</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        self.close()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return page</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    def close(self):</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        self.driver.close()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><u> 2. Informationen der Webseite ermitteln </u><p>Wir filtern aus unserer eigenen <a href="https://infologistix.de/" target="_blank" rel="noopener noreferrer">Homepage</a> die angebotenen Dienstleistungen heraus und wollen diese mit Namen, Details und Referenz abspeichern. Dazu suchen wir uns die Informationen auf der Website und ermitteln die HTML-Grundstruktur. In unserem Fall befinden sich die Dienstleistungen in einem ‚section‘-Element, welches wir finden müssen. Unser gesuchtes Element besitzt die ID ‚Leistungen‘, welches wiederum mehrere ‚section‘-Elemente mit dem Klassenattribut ‚elementor-image-box-content‘ beinhaltet. Hier sind alle Dienstleistungen hinterlegt.</p><p>Zunächst warten wir, bis das gesuchte Element vorhanden ist. Wir teilen mit WebDrverWait unserem Programm mit, maximal 10 Sekunden darauf zu warten, dass unser gefordertes Element auf der Webseite im DOM vorhanden ist. Ist dieses Element nicht vorhanden, dann wird hier aus dem laufenden Programm ausgestiegen und man läuft in keine Fehler.</p><p>Dann speichern wir uns den Container mit den gesuchten Elementen mittels der find_element_by<!-- -->*<!-- -->-Funktion und suchen innerhalb dieses Containers mit find_elements_by* alle gesuchten Elemente und extrahieren die einzelnen Informationen der Extraktion.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">def getServices(self) -&gt; list:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        results = list()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.ID, "Leistungen")))</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        services = self.driver.find_element_by_id ("Leistungen")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        for service in services.find_elements_by_tag_name("section"):</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            results.append(</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                 self.__extract(</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                          service.find_element_by_class_name(</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                                   "elementor-image-box-content")))</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         return results</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Als Ergebnis erhalten wir eine Liste, welche wir nur noch zurückgeben müssen. Was genau die Funktion __extract() macht, das erklären wir gleich</p><p>Mit Hilfe der Liste lässt sich jetzt eine Darstellung der einzelnen Leistungen entwickeln, welche die Sichtbarkeit und Lesbarkeit für den Menschen vereinfacht. Wir wählen hierbei die Darstellung eines Pandas DatenFrames, da hier z.B. auch numerische Berechnungen und Aggregationen vorgenommen werden können. Zusätzlich können hieraus auch Excel-Dateien erstellt werden. Wir bilden hier also einen DataFrame mit den Spalten „URI“, „Title“ und „Description“ aus unserer Liste, in welchem der Titel, Beschreibung und die jeweilige Referenz steht.</p><p>Zurückgegeben wird dann ein DatenFrame.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">def makeFrame(self, services: list) -&gt; pd.DataFrame:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    return pd.DataFrame(services)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Auf Basis dieser Transformation der Ergebnisse stellen wir unsere run() Funktion um, sodass sie uns die gefundenen Ergebnisse liefert und die erstellten Funktionen einbindet.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">def run(self):</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     services = self.getServices()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     self.close()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">     return self.makeFrame(services)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Erinnern wir uns zurück an unsere __extract() Funktion. Hier wollen wir aus den Elementen die erforderlichen Informationen extrahieren. Relevante Informationen herauszufinden und zu filtern, ist hier die Hauptaufgabe. Sämtliche Informationen sind in unterschiedlichen Elementen mit unterschiedlichen Identifizierungsmöglichkeiten vorhanden. Der Titel steht zum Beispiel als Text innerhalb eines ‚a‘-Elements, welches zusätzlich noch die Referenz beinhaltet. In unserem Beispiel setzt sich die Extraktionsfunktion wie folgt zusammen und gibt uns ein geordnetes Dictionary zurück, in welchem die Elementinformationen enthalten sind.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">def __extract(self, service: WebElement) -&gt; dict:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           "URI": service.find_element_by_tag_name("a").get_attribute("href"),</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           "Title": service.find_element_by_tag_name("a").text,</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           "Description": service.find_element_by_tag_name("p").text,</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Die gesamte Klasse mit Funktionen sieht dann wie folgt aus:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">class InfologistixCrawler():</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    def __init__(self, url, headless=False):</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        options = ChromeOptions()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        options.add_argument("–no-sandbox")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        options.add_argument("–window-size=1280,720")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        if headless:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            options.add_argument("–headless")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        self.driver = Chrome(options=options)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        self.driver.get(url)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    def getServices(self) -&gt; list:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        results = list()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.ID, "Leistungen")))</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        services = self.driver.find_element_by_id ("Leistungen")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        for service in services.find_elements_by_tag_name("section"):</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            results.append(</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                 self.__extract(</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                          service.find_element_by_class_name(</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                                   "elementor-image-box-content")))</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return results</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    def __extract(self, service: WebElement) -&gt; dict:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           "URI": service.find_element_by_tag_name("a").get_attribute("href"),</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           "Title": service.find_element_by_tag_name("a").text,</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           "Description": service.find_element_by_tag_name("p").text,</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    def makeFrame(self, services : list) -&gt; pd.DataFrame:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return pd.DataFrame(services)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    def run(self) -&gt; pd.DataFrame:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        services = self.getServices()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        self.close()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return self.makeFrame(services)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    def close(self) -&gt; None:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        self.driver.close()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Lassen wir unseren Crawler laufen, dann erhalten wir einen DataFrame mit den angebotenen Leistungen der infologistix GmbH.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">services = Crawler(url="https://infologistix.de").run()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Wir können nun die Dienstleistungen der infologistix GmbH von der Website extrahieren und als Dataframe ausgeben lassen. Der nächste Schritt ist die Übermittlung der Ergebnisse.</p><u> 3. Übermittlung &amp; Messaging </u>Für Teams, als auch Slack wird ein Token beziehungsweise Webhook verwendet, um eine formatierte Nachricht an einen Channel zu senden. Die Integration von Slack ist leider noch nicht vollständig umgesetzt und kann daher zu Fehlern führen.<p><a href="https://dev.outlook.com/Connectors/GetStarted#creating-messages-through-office-365-connectors-in-microsoft-teams" target="_blank" rel="noopener noreferrer">Hier findest du eine detaillierte Anleitung, wie man an eine Webhook eines Kanals in MS Teams gelangt.</a></p><p>Hier benutzen wir die Basisbibliothek pymsteams und erstellen eine Card mit der uns verfügbaren Webhook URL. Wir fügen dem Beitrag einen Titel und die als HTML formatierten Suchergebnisse an und schicken ihn an unseren Teams-Channel.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">import pymsteams</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">message = services.to_html()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">title = "Dienstleistungen Infologistix"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">def sendMSTeams(webhook : str, message : str, title : str) -&gt; Literal[True]:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    channel = pymsteams.connectorcard(webhook)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    channel.title(title)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    channel.text(message)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    return channel.send()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Wir haben nun unseren Ablauf geplant und können diesen als main.py speichern.</p><u> 4. Cloud-Container </u>Mit dem hier erstellten Script können wir jetzt einen Docker-Container erstellen, welcher uns die Möglichkeit gibt, den Crawler in der Cloud laufen zu lassen. Hierzu erstellen wir das Dockerfile oder nehmen das bereits vorhandene Beispiel auf.<p>Es reicht hier ein einfacher Befehl um dieses Beispiel laufen zu lassen.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ docker run -it –rm –shm-size=128m docker-selenium-python:latest python ./examples/main.py</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Eine Anleitung für das Einrichten in der Cloud-Umgebung findest du hier:</p><ul><li><a href="https://learn.microsoft.com/de-de/azure/container-instances/container-instances-tutorial-prepare-app" target="_blank" rel="noopener noreferrer">Microsoft Azure</a></li><li><a href="https://us-east-1.signin.aws.amazon.com/oauth?SignatureVersion=4&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQHJ3VXZJKWI3EBO4&amp;X-Amz-Date=2023-05-15T15%3A08%3A10.140Z&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJHMEUCIQChMDyBnLd2%2F6pRONs4Qt%2ByvBbsOpAnL9akqgT%2FbmPzHQIgQDYigveW%2FZwaS10R4VZkdtTA08gEFv%2FXedWIz5r%2ByhkqzQMIGBACGgwwMTU2OTQ0MTMzOTQiDHXEpnkLczxPEFM%2B1SqqAzRfwLNltRQTxPe6NJdMLiwSKoLDoKdz0cfX%2B3V1qQ9SLmVKLxC3Ar3a7JNJzQ2P%2Fj7nrb5FGWM2FhQ8GUt6Zr1YE%2F%2FqvVm1%2FESeKDWHlsJMg0fF8IxeY9vQSVPE59zHD4IP94QeLfiHQPY0zO8fIY98FH6SBw18a%2FJh4AbGv20QF92lXwqVVJlmeyfdKdOTP9%2FjPwAZV1F8FItFqkqkOb8r8p8QwvPEDPr%2B0CqOdOQ631qdOtT%2FBYsOcXcvqBxeAyx1ud2SsvHC1bxG7eFdUGPrigT%2B08LU6rWtabEzNFFsVHzYV45K4o56JTO8%2BeFeKgri7N5qAINjmWAKzBRpSvF2zLx8i5Y%2BLYLx278yZwaNRSTCj%2FzaDkI%2BSP1cqU2qLStDbjXD51CrA3RSVxMjUn7%2BqqF48ynxogK2gsPeNAXSpt4RUwen28SINrnzw6ajQHxU3bxKa8pHx4sIe%2Fq6%2BmsHNdwP9EJsQ5WT0Dsd16F29IVrSfOPbN7azqPuCmVT5HmXtC13WsltPEHL4LHYlGCNqWQy2yIe0ivXLdoEmTEl1aIzwUpWCi0uEjDUgYmjBjqhAYubtfW9U3AJzxe55%2FXr2Ps%2FTiqGV8tWTNhFESUbyVKKXPXeFrbvrQd%2BXNUhXekARqS4aqbyiqmNxy3HyoxWFXnQkIrZHNZfj8kORXtj6QpWwGtYi7J5kh9TOAyW1GASQpj5CLuk8LnvsBLsAqmdSmuxD69GwoaZ1%2FqcSd441OA1uIiaYjeVM4MAU7Z%2F5hKmgLFacJZwD7UaHq7BNIjt2YZ8&amp;X-Amz-Signature=88941b4e1ab60b16a86d29aa30169819c908f3b5558268f10040ef6c273940e1&amp;X-Amz-SignedHeaders=host&amp;client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fecs&amp;code_challenge=Rzvs-__JFcYEHVU8L8WkBiXx4NhaNcxiZN2krlbe1XQ&amp;code_challenge_method=SHA-256&amp;redirect_uri=https%3A%2F%2Fus-east-1.console.aws.amazon.com%2Fecs%2Fhome%3Fregion%3Dus-east-1%26state%3DhashArgs%2523%252FgetStarted%26isauthcode%3Dtrue&amp;region=us-east-1&amp;response_type=code&amp;state=hashArgs%23%2FgetStarted" target="_blank" rel="noopener noreferrer">Amazon AWS</a></li><li><a href="https://cloud.google.com/container-registry/docs/pushing-and-pulling?hl=de" target="_blank" rel="noopener noreferrer">Google Cloud Services</a></li></ul>]]></content>
        <category label="Python3" term="Python3"/>
        <category label="Azure" term="Azure"/>
    </entry>
</feed>